import java.io.*;
import java.util.*;
public class Main {
	static int N = 0, M = 0;// 행 열
	static int years = 0; // 얼마나 걸렸는지 결과값
	static int[][] map = null;
	static int[] dy = { -1, 0, 1, 0 };
	static int[] dx = { 0, 1, 0, -1 }; // 12시방향부터 시계방향
	static class Node {
		int y, x;
		public Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		while (!check(map)) {
			melt();
		}
		bw.write(years + "");
		bw.flush();
	}

	/* 아직 빙산이 있는지 있다면 두조각인지 */
	static boolean check(int[][] map) {
		boolean can = false;
		loop: for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] > 0) { // 중간에 빙산이 있으면 검사하고 녹일꺼야
					break loop;
				} else if (i == N - 1 && j == M - 1) { // 끝까지왔는데도 빙산이 없다면 더이상의 빙산은 없어
					years = 0; // 그러면 결과값은 0으로 만들어주고
					can = true; // 끝내자
					return can;
				}
			}
		}
		int[][] copy = new int[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				copy[i][j] = map[i][j];
			}
		}
		Queue<Node> q = new LinkedList<>();
		int icecount = 0; // 이게 1보다 크면 can을 true로 바꾼다
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (copy[i][j] > 0) {
					icecount++;
					copy[i][j] = 0;
					q.add(new Node(i, j));
					while (!q.isEmpty()) {
						Node tmp = q.poll();
						int py = tmp.y;
						int px = tmp.x;
						for (int d = 0; d < 4; d++) {
							int ny = py + dy[d];
							int nx = px + dx[d];
							if (ny >= 0 && ny < N && nx >= 0 && nx < M && copy[ny][nx] != 0) {
								copy[ny][nx] = 0;
								q.add(new Node(ny, nx));
							}
						}	
					}
				}
			}
		}
		if (icecount > 1) { // 만약 빙산이 1개 초과라면 끝내자
			can = true;
		}
		return can;
	}

	/* 빙산을 녹이자 */
	static void melt() {
		boolean[][] visitice = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] > 0 && visitice[i][j] == false) { // 빙산이 있고 아직 방문안한 빙산이라면
					visitice[i][j] = true;
					int meltcnt = 0;
					for (int d = 0; d < 4; d++) {
						int ny = i + dy[d];
						int nx = j + dx[d];
						if (ny >= 0 && ny < N && nx >= 0 && nx < M && map[ny][nx] == 0) { // map 밖에 안나가고 주위가 바다라면 녹일꺼야
							meltcnt++;
						}
					}
					if (map[i][j] - meltcnt > 0) { // 우선 녹이는게 0보다 큰 경우에만 녹여
						map[i][j] -= meltcnt;
						visitice[i][j]=false;
					}
				}
			}
		}
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (visitice[i][j] == true) { // 이제 녹이려했는데 못녹였던 곳을 녹여주자
					map[i][j] = 0;
				}
			}
		}
		years++; // 마지막에 1년이 지난다
	}
}
