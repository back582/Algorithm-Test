
//각 선거구는 1번 부터 N번 까지 구분됨

import java.util.*;
import java.io.*;
public class Main {
	
	static int N;	//구역수
	static int[] human;	//1번부터 N번 까지의 인구들 때문에 N+1 개의 배열을 만들어 줬다
	//static ArrayList<Integer>[] a = new ArrayList[N+1]; //각 간선들을 리스트배열로 저장해주자
	static int[][] adj;	//선거구간의 인접 정보
	static boolean[] sel; //선거구를 t , f 두 집단으로 나눈다.

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		human = new int[N+1];
		StringTokenizer st = new StringTokenizer(br.readLine());
		for(int i=1; i<=N; i++) {
			human[i]=Integer.parseInt(st.nextToken());
		}
		
		adj = new int[N+1][N+1];
		for(int i=1; i<=N; i++) {
			st= new StringTokenizer(br.readLine());
			int cnt = Integer.parseInt(st.nextToken());
			for(int j=0; j<cnt; j++) {
				int other = Integer.parseInt(st.nextToken());
				adj[i][other]=1;
				adj[other][i]=1;
			}
		}
		//부분집합을 구하자. boolean배열에 각각 모든 경우의 조합으로 t f를 준다.
		sel = new boolean[N+1];
		powerSet(1);
		if(ans == Integer.MAX_VALUE) System.out.println(-1);
		else System.out.println(ans);
	}
	
	
	static int ans = Integer.MAX_VALUE;
	static void powerSet(int idx) {
		if(idx==N+1) {
		    if(check()) {	//각 마을 집단이 서로서로 모두 연결인지 검사해서 t인지 f인지 리턴
			//System.out.println(Arrays.toString(sel));
				int sumA=0;
				int sumB=0;
				for(int i=1; i<=N; i++) {
					if(sel[i]) sumA+=human[i];
					else sumB+=human[i];
				}
				ans=Math.min(ans, Math.abs(sumA-sumB));
		    }
			return;
		}
		sel[idx]=true;
		powerSet(idx+1);
		sel[idx]=false;
		powerSet(idx+1);
	}
	
	
	static boolean check() {
		List<Integer> areaA = new ArrayList<>();
		List<Integer> areaB = new ArrayList<>();
		for(int i=1; i<=N; i++) {
			if(sel[i])	areaA.add(i);
			else	areaB.add(i);
		}
		if(areaA.size()==0 || areaB.size()==0) return false;
		boolean[] visited = new boolean[N+1];
		//A마을 아무 지접이나 출발로, B마을 아무 지점이나 출발로, 각각 Bfs 혹은 Dfs를 통해 탐색하며 방문할땐 t로 변경
		//양쪽 다 탐색 후 visited 의 1번째부터 N번까지 모두 t가 되있다면, 모두 연결된거야
		if(areaA.size()>0) {
			Queue<Integer> queue = new LinkedList<>();
			queue.add(areaA.get(0));
			visited[areaA.get(0)] = true;
			while(!queue.isEmpty()) {
				int node = queue.poll();
				for(int i=1; i<=N; i++) {
					//sel[i]가 t이면 A
					//A마을이면서 인접경로가 존재하고 아직 방문하지 않았다면 큐에추가
					if(sel[i] && adj[node][i] !=0 && !visited[i]) {
						visited[i]=true;
						queue.add(i);
					}
				}
			}
		}
		if(areaB.size()>0) {
			Queue<Integer> queue = new LinkedList<>();
			queue.add(areaB.get(0));
			visited[areaB.get(0)] = true;
			while(!queue.isEmpty()) {
				int node = queue.poll();
				for(int i=1; i<=N; i++) {
					//sel[i]가 t이면 B
					//B마을이면서 인접경로가 존재하고 아직 방문하지 않았다면 큐에추가
					if(!sel[i] && adj[node][i] !=0 && !visited[i]) {
						visited[i]=true;
						queue.add(i);
					}
				}
			}
		}
		for(int i=1; i<=N; i++){
			if(!visited[i])	return false;
		}
		return true;
	}
}
